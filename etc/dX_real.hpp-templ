#ifndef	DX_REAL_H
#define	DX_REAL_H

#include <x86intrin.h>

#include "mX_real.hpp"


namespace mX_real {
namespace dX_real {

  template < typename T, Algorithm A=Algorithm::Accurate >
  struct dx_real {

    static_assert( fp<T>::value,
                   "The base type must be out of the defined types, such as float or double." );

    //
    //
    using base_T = T;
    static Algorithm constexpr base_A = A;
    //
    // {DX,TX,QX}_REAL are shortcut type only within dx_real
    //
  private:
    template < Algorithm _A_=A >
    using DX_REAL = dX_real::dx_real<T,_A_>;
    template < Algorithm _A_=A >
    using TX_REAL = tX_real::tx_real<T,_A_>;
    template < Algorithm _A_=A >
    using QX_REAL = qX_real::qx_real<T,_A_>;
    //
    //
  public:
    static int constexpr L = 2;
    T x[L];
    //
    template < Algorithm _A_ >
    using type_with_Algorithm = DX_REAL<_A_>;
    using type_Accurate = type_with_Algorithm<Algorithm::Accurate>;
    using type_Sloppy   = type_with_Algorithm<Algorithm::Sloppy>;
    using type_Quasi    = type_with_Algorithm<Algorithm::Quasi>;
    //
    using lower_type    = T;
    using higher_type   = TX_REAL<>;


    //
    // A special member function utilized in constructors
    //
    INLINE T quick_Normalized () const {
      T s = x[0];
      if ( A == Algorithm::Quasi ) { s += x[1]; }
      return s;
    }
    INLINE DX_REAL<> element_rotate () const {
      T y[L]; y[0] = x[0]; y[1] = x[1];
      for(int i=0; i<L-1; i++) {
        if ( ! fp<T>::is_zero( y[0] ) ) { return DX_REAL<>( y ); }
        T t = y[0]; y[0] = y[1]; y[1] = t;
      }
      return DX_REAL<>( y );
    }


    //
    // Simple constructors
    //
    INLINE dx_real() {
      x[0] = x[1] = fp<T>::zero;
    }
    INLINE dx_real( T const& x0, T const& x1 ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = x0 + x1;
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      { x[0] = x0; x[1] = x1; }
    }
    INLINE dx_real( int const &h ) {
      { x[0] = T(h); x[1] = fp<T>::zero; }
    }
    INLINE dx_real( T const *d ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = d[0] + d[1];
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      { x[0] = d[0]; x[1] = d[1]; }
    }

    //
    // Copy constructor with (or without) any Algorithm switch
    // auto zero_accurate = df_Real( 0 ); // constructor
    // auto zero_sloppy = df_Real_sloppy( zero_accurate ); // copy constructor
    //
    INLINE dx_real( T const& h ) { // constructor
      x[0] = h; x[1] = fp<T>::zero;
    }
    template < Algorithm _A_ >
    INLINE dx_real( DX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
    }
    template < Algorithm _A_ >
    INLINE dx_real( TX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
    }
    template < Algorithm _A_ >
    INLINE dx_real( QX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
    }

    //
    // Copy-assignment operator
    // auto one = df_Real( 1 ); // a constructor
    // one = df_Real_sloppy( one ); // LHS is a copy-assignment operator
    //
    INLINE DX_REAL<> &operator=( int const& h )_LV_ {
      x[0] = T(h); x[1] = fp<T>::zero;
      return *this;
    }
    INLINE DX_REAL<> &operator=( T const& h )_LV_ {
      x[0] = h; x[1] = fp<T>::zero;
      return *this;
    }
    template < Algorithm _A_ >
    INLINE DX_REAL<> &operator=( DX_REAL<_A_> const& h )_LV_ {
      if ( A == _A_ && this == (DX_REAL<>*)(&h) ) { return *this; }
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
      return *this;
    }
    template < Algorithm _A_ >
    INLINE DX_REAL<> &operator=( TX_REAL<_A_> const& h )_LV_ {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
      return *this;
    }
    template < Algorithm _A_ >
    INLINE DX_REAL<> &operator=( QX_REAL<_A_> const& h )_LV_ {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1];
      }
      return *this;
    }


    //
    // Casting to other datatypes like
    // auto one = df_Real( 1 ); // constructor with an argument
    // auto one_ = (sf_Real_quasi)one; // RHS is datacast while LHS is a copy constructor
    //
    explicit
    INLINE operator T() const noexcept {
      if ( A == Algorithm::Quasi ) {
        return this->quick_Normalized();
      } else {
        return x[0];
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator DX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
        return DX_REAL<_A_>{ s.x };
      } else {
        return DX_REAL<_A_>{ x };
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator TX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
        return TX_REAL<_A_>{ s.x[0], s.x[1], fp<T>::zero };
      } else {
        T c = std::isinf(x[0]) ? x[0] : fp<T>::zero;
        return TX_REAL<_A_>{ x[0], x[1], c };
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator QX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
        return QX_REAL<_A_>( s.x[0], s.x[1], fp<T>::zero, fp<T>::zero );
      } else {
        T c = std::isinf(x[0]) ? x[0] : fp<T>::zero;
        return QX_REAL<_A_>{ x[0], x[1], c, c };
      }
    }


    //
    // unneccessary operators are invalidaded
    //
    auto const operator!  () = delete;
    auto const operator~  () = delete;
    auto const operator++ () = delete;
    auto const operator-- () = delete;
    template < typename _T_ > auto const operator&&  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator||  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator&=  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator^=  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator<<= ( _T_ a ) = delete;
    template < typename _T_ > auto const operator>>= ( _T_ a ) = delete;
    template < typename _T_ > auto const operator,   ( _T_ a ) = delete;
    auto const operator() (...) = delete;
    template < typename _T_ > auto const operator[]  ( _T_ a ) = delete;

    //
    template < typename _T_ > auto const operator/=  ( _T_ a ) = delete;


    //
    // static constexpr member functions or constatns
    // contents are always in Accurate format
    // but they follow in the Algorithm argument 'A'
    //
    static INLINE DX_REAL<> constexpr zero () { return DX_REAL<>{ fp<T>::zero }; }
    static INLINE DX_REAL<> constexpr one  () { return DX_REAL<>{ fp<T>::one  }; }
    static INLINE DX_REAL<> constexpr two  () { return DX_REAL<>{ fp<T>::two  }; }
    static INLINE DX_REAL<> constexpr half () { return DX_REAL<>{ fp<T>::half }; }

    static INLINE DX_REAL<> constexpr nan  () { T c = fp<T>::nan; return DX_REAL<>{ c,c }; }
    static INLINE DX_REAL<> constexpr inf  () { T c = fp<T>::inf; return DX_REAL<>{ c,c }; }
    static INLINE DX_REAL<> constexpr epsilon () {
      T c = fp<T>::epsilon * fp<T>::half; c = (c * c) * 2;
      return DX_REAL<>{ c };
    }
    static INLINE DX_REAL<> constexpr denorm_min  () {
      T c0 = fp<T>::denorm_min;
      return DX_REAL<>{ c0 };
    }
    static INLINE DX_REAL<> constexpr min  () {
      T c0 = fp<T>::min;
      T c1 = c0 * ( fp<T>::epsiloni * 2 );
      return DX_REAL<>{ c1 };
    }
    static INLINE DX_REAL<> constexpr max  () {
      T c0 = fp<T>::max;
      T c1 = c0 * ( fp<T>::epsilon * fp<T>::half );
      return DX_REAL<>{ c0, c1 };
    }


@@include "dx_members.hpp"

  };


  // 
  // get a new type dX_real<T,A> from TX(={m}X_real<T,A>)
  //
  //
  template < typename TX, IF_T_mX<TX> >
  struct mX_real_impl {
    static Algorithm constexpr A = TX::base_A;
    using T    = typename TX::base_T;
    using type = typename dX_real::dx_real<T,A>;
  };
  template < typename TX >
  using mX_real = typename mX_real_impl<TX>::type;


  //
  // Alias names
  //
  //
  template < typename T >
  using dX_real_accurate = dX_real::dx_real<T,Algorithm::Accurate>;
  template < typename T >
  using dX_real_sloppy   = dX_real::dx_real<T,Algorithm::Sloppy>;
  template < typename T >
  using dX_real_quasi    = dX_real::dx_real<T,Algorithm::Quasi>;


@@include "dx_bits.hpp"

  //
  // Comparison
  //
  //
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator_eq ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    return a.x[0] == b.x[0] && a.x[1] == b.x[1];
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator== ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    if ( A == Algorithm::Quasi ) {
      using TT = dX_real::dx_real<T,Algorithm::Accurate>;
      return dX_real::operator_eq( TT{ a }, TT{ b } );
    } else {
      return dX_real::operator_eq( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator!= ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    return !(a == b);
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator_lt ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    if ( a.x[0] != b.x[0] ) {
      return a.x[0] < b.x[0];
    } else {
      return a.x[1] < b.x[1];
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator< ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    if ( A == Algorithm::Quasi ) {
      using TT = dX_real::dx_real<T,Algorithm::Accurate>;
      return dX_real::operator_lt( TT{ a }, TT{ b } );
    } else {
      return dX_real::operator_lt( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator_gt ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    if ( a.x[0] != b.x[0] ) {
      return a.x[0] > b.x[0];
    } else {
      return a.x[1] > b.x[1];
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator> ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    if ( A == Algorithm::Quasi ) {
      using TT = dX_real::dx_real<T,Algorithm::Accurate>;
      return dX_real::operator_gt( TT{ a }, TT{ b } );
    } else {
      return dX_real::operator_gt( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator>= ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    return !(a < b);
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator<= ( dX_real::dx_real<T,Aa> const& a, dX_real::dx_real<T,Ab> const& b ) {
    return !(a > b);
  }


  //
  // Unitary operators
  //
  template < typename T, Algorithm Aa >
  INLINE auto const reversed_sign ( dX_real::dx_real<T,Aa> const& a ) {
    return dX_real::dx_real<T,Aa>( -a.x[0], -a.x[1] );
  }
  //
  template < typename T, Algorithm Aa >
  INLINE auto const operator+ ( dX_real::dx_real<T,Aa> const& a ) {
    return a;
  }
  template < typename T, Algorithm Aa >
  INLINE auto const operator- ( dX_real::dx_real<T,Aa> const& a ) {
    return dX_real::reversed_sign( a );
  }


@@include "dx_add_sub_mul_div.hpp"
@@include "dx_func.hpp"


  //
  //
  template < typename T, Algorithm Aa >
  INLINE std::ostream& operator<< ( std::ostream& stream, dX_real::dx_real<T,Aa> const& a ) {
    stream << std::to_string(a.x[0])
    << " " << std::to_string(a.x[1]);
    return stream;
  }

}
}


#endif

