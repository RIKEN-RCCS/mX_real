#ifndef	QX_REAL_H
#define	QX_REAL_H

#include "mX_real.hpp"


namespace mX_real {
namespace qX_real {

  template < typename T, Algorithm A=Algorithm::Accurate >
  struct qx_real {

    static_assert( fp<T>::value,
                   "The base type must be out of the defined types, such as float or double." );

    //
    //
    using base_T = T;
    static Algorithm constexpr base_A = A;
    //
    // {DX,TX,QX}_REAL are shortcut type only within qx_real
    //
  private:
    template < Algorithm _A_=A >
    using DX_REAL = dX_real::dx_real<T,_A_>;
    template < Algorithm _A_=A >
    using TX_REAL = tX_real::tx_real<T,_A_>;
    template < Algorithm _A_=A >
    using QX_REAL = qX_real::qx_real<T,_A_>;
    //
    //
  public:
    static int constexpr L = 4;
    T x[L];
    //
    template < Algorithm _A_ >
    using type_with_Algorithm = typename qX_real::qx_real<T,_A_>;
    using type_Accurate = typename qX_real::qx_real<T,Algorithm::Accurate>;
    using type_Sloppy   = typename qX_real::qx_real<T,Algorithm::Sloppy>;
    using type_Quasi    = typename qX_real::qx_real<T,Algorithm::Quasi>;
    //
    using lower_type    = TX_REAL<>;
    using higher_type   = QX_REAL<>;


    //
    // A special member function utilized in constructors
    //
    INLINE T quick_Normalized() const {
      auto s = x[0];
      if ( A == Algorithm::Quasi ) { s += x[1] + x[2] + x[3]; }
      return s;
    }
    INLINE QX_REAL<> element_rotate () const {
      T y[L]; y[0] = x[0]; y[1] = x[1]; y[2] = x[2]; y[3] = x[3];
      for(int i=0; i<L-1; i++) {
        if ( ! fp<T>::is_zero( y[0] ) ) { return QX_REAL<>( y ); }
        T t = y[0]; y[0] = y[1]; y[1] = y[2]; y[2] = y[3]; y[3] = t;
      }
      return QX_REAL<>( y );
    }


    //
    INLINE qx_real() {
      x[0] = x[1] = x[2] = x[3] = fp<T>::zero;
    }
    INLINE qx_real( T const& x0, T const& x1, T const& x2, T const& x3 ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = x0 + x1 + x2 + x3;
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      { x[0] = x0; x[1] = x1; x[2] = x2; x[3] = x3; }
    }
    INLINE qx_real(int const& h) {
      { x[0] = T(h); x[1] = x[2] = x[3] = fp<T>::zero; }
    }
    INLINE qx_real(T const *d) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = d[0] + d[1] + d[2] + d[3];
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      { x[0] = d[0]; x[1] = d[1]; x[2] = d[2]; x[3] = d[3]; }
    }

    //
    //
    INLINE qx_real( T const& h ) {
      x[0] = h; x[1] = x[2] = x[3] = fp<T>::zero;
    }
    template < Algorithm _A_ >
    INLINE qx_real( DX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = x[3] = fp<T>::zero;
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = x[3] = fp<T>::zero;
      }
    }
    template < Algorithm _A_ >
    INLINE qx_real( TX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = h.x[2]; x[3] = fp<T>::zero;
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = s.x[2]; x[3] = fp<T>::zero;
      }
    }
    template < Algorithm _A_ >
    INLINE qx_real( QX_REAL<_A_> const& h ) {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = h.x[2]; x[3] = h.x[3];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = s.x[2]; x[3] = s.x[3];
      }
    }

    //
    //
    INLINE QX_REAL<> &operator=( int const& h )_LV_ {
      x[0] = T(h); x[1] = x[2] = x[3] = fp<T>::zero;
      return *this;
    }
    INLINE QX_REAL<> &operator=( T const& h )_LV_ {
      x[0] = h; x[1] = x[2] = x[3] = fp<T>::zero;
      return *this;
    }
    template < Algorithm _A_ >
    INLINE QX_REAL<> &operator=( DX_REAL<_A_> const& h )_LV_ {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = x[3] = fp<T>::zero;
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = x[3] = fp<T>::zero;
      }
      return *this;
    }
    template < Algorithm _A_ >
    INLINE QX_REAL<> &operator=( TX_REAL<_A_> const& h )_LV_ {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = h.x[2]; x[3] = fp<T>::zero;
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = s.x[2]; x[3] = fp<T>::zero;
      }
      return *this;
    }
    template < Algorithm _A_ >
    INLINE QX_REAL<> &operator=( QX_REAL<_A_> const& h )_LV_ {
      if ( A == _A_ && this == (QX_REAL<>*)(&h) ) { return *this; }
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        x[0] = x[1] = x[2] = x[3] = t;
      } else
#endif
      if ( A == Algorithm::Quasi || _A_ != Algorithm::Quasi ) {
        x[0] = h.x[0]; x[1] = h.x[1]; x[2] = h.x[2]; x[3] = h.x[3];
      } else {
        auto s = h;
	mX_real::Normalize<1>( s );
        x[0] = s.x[0]; x[1] = s.x[1]; x[2] = s.x[2]; x[3] = s.x[3];
      }
      return *this;
    }


    //
    //
    explicit
    INLINE operator T() const noexcept {
      if ( A == Algorithm::Quasi ) {
        return x[0] + x[1] + x[2] + x[3];
      } else {
        return x[0];
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator DX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = c.x[2] = c.x[3] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
	return DX_REAL<_A_>( s.x );
      } else {
	return DX_REAL<_A_>( x );
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator TX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = c.x[2] = c.x[3] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
	return TX_REAL<_A_>( s.x );
      } else {
	return TX_REAL<_A_>( x );
      }
    }
    template < Algorithm _A_ >
    explicit
    INLINE operator QX_REAL<_A_>() const noexcept {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        DX_REAL<_A_> c;
        c.x[0] = c.x[1] = c.x[2] = c.x[3] = t;
        return c;
      } else
#endif
      if ( A == Algorithm::Quasi && _A_ != Algorithm::Quasi ) {
        auto s = *this;
	mX_real::Normalize<1>( s );
	return QX_REAL<_A_>( s.x );
      } else {
	return QX_REAL<_A_>( x );
      }
    }


    //
    // unneccessary operators are invalidaded
    //
    auto const operator!  () = delete;
    auto const operator~  () = delete;
    auto const operator++ () = delete;
    auto const operator-- () = delete;
    template < typename _T_ > auto const operator&&  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator||  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator&=  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator^=  ( _T_ a ) = delete;
    template < typename _T_ > auto const operator<<= ( _T_ a ) = delete;
    template < typename _T_ > auto const operator>>= ( _T_ a ) = delete;
    template < typename _T_ > auto const operator,   ( _T_ a ) = delete;
    auto const operator() (...) = delete;
    template < typename _T_ > auto const operator[]  ( _T_ a ) = delete;

    //
    template < typename _T_ > auto const operator/=  ( _T_ a ) = delete;


    //
    // member constexpr functions
    // contents are always in Accurate format
    // but they follow in the Algorithm argument 'A'
    //
    static INLINE QX_REAL<> constexpr zero () { return QX_REAL<>( fp<T>::zero ); }
    static INLINE QX_REAL<> constexpr one  () { return QX_REAL<>( fp<T>::one ); }
    static INLINE QX_REAL<> constexpr two  () { return QX_REAL<>( fp<T>::two ); }
    static INLINE QX_REAL<> constexpr half () { return QX_REAL<>( fp<T>::half ); }

    static INLINE QX_REAL<> constexpr nan  () { T c = fp<T>::nan; return QX_REAL<>( c,c,c,c ); }
    static INLINE QX_REAL<> constexpr inf  () { T c = fp<T>::inf; return QX_REAL<>( c,c,c,c ); }
    static INLINE QX_REAL<> constexpr epsilon () {
      T c = fp<T>::epsilon * fp<T>::half; c = (c * c); c = (c * c) * 2;
      return QX_REAL<>( c );
    }
    static INLINE QX_REAL<> constexpr denorm_min  () {
      T c0 = fp<T>::denorm_min();
      return QX_REAL<>( c0 );
    }
    static INLINE QX_REAL<> constexpr min  () {
      T c0 = fp<T>::min();
      T c1 = c0 * ( fp<T>::epsiloni * 2 );
      T c2 = c1 * ( fp<T>::epsiloni * 2 );
      T c3 = c2 * ( fp<T>::epsiloni * 2 );
      return QX_REAL<>( c3 );
    }
    static INLINE QX_REAL<> constexpr max  () {
      T c0 = fp<T>::max();
      T c1 = c0 * ( fp<T>::epsilon * fp<T>::half );
      T c2 = c1 * ( fp<T>::epsilon * fp<T>::half );
      T c3 = c2 * ( fp<T>::epsilon * fp<T>::half );
      return QX_REAL<>( c0, c1, c2, c3 );
    }


@@include "qx_members.hpp"

  };


  //
  // get a new type qX_real<T,A> from TX(={m}X_real<T,A>)
  //
  //
  template < typename TX, IF_T_mX<TX> >
  struct mX_real_impl {
    static Algorithm constexpr _A_ = TX::base_A;
    using _T_  = typename TX::base_T;
    using type = typename qX_real::qx_real<_T_,_A_>;
  };
  template < typename TX >
  using mX_real = typename mX_real_impl<TX>::type;


  //
  // Alias names
  //
  //
  template < typename T >
  using qX_real_accurate = qX_real::qx_real<T,Algorithm::Accurate>;
  template < typename T >
  using qX_real_sloppy   = qX_real::qx_real<T,Algorithm::Sloppy>;
  template < typename T >
  using qX_real_quasi    = qX_real::qx_real<T,Algorithm::Quasi>;


@@include "qx_bits.hpp"

  //
  // Comparison
  //
  //
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator_eq ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    return a.x[0] == b.x[0] && a.x[1] == b.x[1] && a.x[2] == b.x[2] && a.x[3] == b.x[3];
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator== ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    if ( Aa == Algorithm::Quasi ) {
      using TT = qx_real<T,Algorithm::Accurate>;
      return qX_real::operator_eq( TT{ a }, TT{ b } );
    } else {
      return qX_real::operator_eq( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator!= ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    return !(a == b);
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator_lt ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    if ( a.x[0] != b.x[0] ) {
      return a.x[0] < b.x[0];
    } else if ( a.x[1] != b.x[1] ) {
      return a.x[1] < b.x[1];
    } else if ( a.x[2] != b.x[2] ) {
      return a.x[2] < b.x[2];
    } else {
      return a.x[3] < b.x[3];
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator< ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    if ( A == Algorithm::Quasi ) {
      using TT = qX_real::qx_real<T,Algorithm::Accurate>;
      return qX_real::operator_lt( TT{ a }, TT{ b } );
    } else {
      return qX_real::operator_lt( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator_gt ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    if ( a.x[0] != b.x[0] ) {
      return a.x[0] > b.x[0];
    } else if ( a.x[1] != b.x[1] ) {
      return a.x[1] > b.x[1];
    } else if ( a.x[2] != b.x[2] ) {
      return a.x[2] > b.x[2];
    } else {
      return a.x[3] > b.x[3];
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
  INLINE auto const operator> ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    if ( A == Algorithm::Quasi ) {
      using TT = qX_real::qx_real<T,Algorithm::Accurate>;
      return qX_real::operator_gt( TT{ a }, TT{ b } );
    } else {
      return qX_real::operator_gt( a, b );
    }
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator>= ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    return !(a < b);
  }
  template < typename T, Algorithm Aa, Algorithm Ab >
  INLINE auto const operator<= ( qX_real::qx_real<T,Aa> const& a, qX_real::qx_real<T,Ab> const& b ) {
    return !(a > b);
  }


  //
  // Unitary operations
  //
  template < typename T, Algorithm Aa >
  INLINE auto const reversed_sign ( qX_real::qx_real<T,Aa> const& a ) {
    return qX_real::qx_real<T,Aa>( -a.x[0], -a.x[1], -a.x[2], -a.x[3] );
  }
  //
  template < typename T, Algorithm Aa >
  INLINE auto const operator+ ( qX_real::qx_real<T,Aa> const& a ) {
    return a;
  }
  template < typename T, Algorithm Aa >
  INLINE auto const operator- ( qX_real::qx_real<T,Aa> const& a ) {
    return qX_real::reversed_sign( a );
  }


@@include "qx_add_sub_mul_div.hpp"
@@include "qx_func.hpp"


  //
  //
  template < typename T, Algorithm Aa >
  INLINE std::ostream& operator<< ( std::ostream& stream, qX_real::qx_real<T,Aa> const& a ) {
    stream << std::to_string(a.x[0]) << " "
           << std::to_string(a.x[1]) << " "
           << std::to_string(a.x[2]) << " "
	   << std::to_string(a.x[3]);
    return stream;
  }

}
}


#endif

