    //
    // {description}
    //
    //
    template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
    INLINE auto const operator_{func} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      using TX = {m}X_real::{m}x_real<T,A>;
      int i; for(i=0; i<TX::L-1; i++) {
        if ( a.x[i] != b.x[i] ) { return a.x[i] {op} b.x[i]; }
      } return a.x[i] {op} b.x[i];
    }
    template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
    INLINE auto const operator{op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      if ( A == Algorithm::Quasi ) {
        using TT = {m}X_real::{m}x_real<T,Algorithm::Accurate>;
        return {m}X_real::operator_eq( TT{ a }, TT{ b } );
      } else {
        return {m}X_real::operator_eq( a, b );
      }
    }
    template < typename T, Algorithm Aa, Algorithm Ab >
    INLINE auto const operator{not_op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      return !(a {op} b);
    }
    //
    template < typename T, Algorithm Aa, Algorithm Ab >
    INLINE auto const operator_{func} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      using TX = {m}X_real::{m}x_real<T,A>;
      int i; for(i=0; i<TX::L-1; i++) {
        if ( a.x[i] != b.x[i] ) { return a.x[i] {op} b.x[i]; }
      } return a.x[i] {op} b.x[i];
    }
    template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
    INLINE auto const operator{op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      if ( A == Algorithm::Quasi ) {
        using TT = {m}X_real::{m}x_real<T,Algorithm::Accurate>;
        return {m}X_real::operator_lt( TT{ a }, TT{ b } );
      } else {
        return {m}X_real::operator_lt( a, b );
      }
    }
    template < typename T, Algorithm Aa, Algorithm Ab >
    INLINE auto const operator{not_op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      return !(a {op} b);
    }
    //
    template < typename T, Algorithm Aa, Algorithm Ab >
    INLINE auto const operator_{func} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      using TX = {m}X_real::{m}x_real<T,A>;
      int i; for(i=0; i<TX::L-1; i++) {
        if ( a.x[i] != b.x[i] ) { return a.x[i] {op} b.x[i]; }
      } return a.x[i] {op} b.x[i];
    }
    template < typename T, Algorithm Aa, Algorithm Ab, Algorithm A=commonAlgorithm<Aa,Ab>::algorithm >
    INLINE auto const operator{op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      if ( A == Algorithm::Quasi ) {
        using TT = {m}X_real::{m}x_real<T,Algorithm::Accurate>;
        return {m}X_real::operator_gt( TT{ a }, TT{ b } );
      } else {
        return {m}X_real::operator_gt( a, b );
      }
    }
    template < typename T, Algorithm Aa, Algorithm Ab >
    INLINE auto const operator{not_op} ( {m}X_real::{m}x_real<T,Aa> const& a, {m}X_real::{m}x_real<T,Ab> const& b ) {
      return !(a {op} b);
    }

