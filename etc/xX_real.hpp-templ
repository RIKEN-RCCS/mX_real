#ifndef	@{M}@X_REAL_H
#define	@{M}@X_REAL_H

#include "mX_real.hpp"


namespace mX_real {
namespace @{m}@X_real {

  template < typename T, Algorithm A=Algorithm::Accurate >
  struct @{m}@x_real {

    static_assert( fp<T>::value,
                   "The base type must be a pre-defined type such as float or double." );

    //
    //
    //
    using base_T = T;
    static Algorithm constexpr base_A = A;

    //
    // {DX,TX,QX}_REAL are shortcut type only within @{m}@x_real
    //
    //
  private:
    template < Algorithm _A_=A >
    using DX_REAL = dX_real::dx_real<T,_A_>;
    template < Algorithm _A_=A >
    using TX_REAL = tX_real::tx_real<T,_A_>;
    template < Algorithm _A_=A >
    using QX_REAL = qX_real::qx_real<T,_A_>;

    //
    //
    //
  public:
    static int constexpr L = @{L}@;
    T x[L];

    //
    //
    //
    template < Algorithm _A_ >
    using type_with_Algorithm = @{M}@X_REAL<_A_>;
    //
@@@{ A Accurate Sloppy Quasi
    using type@{A}@   = type_with_Algorithm<Algorithm::@{A}@>;
}@@@
    //
    using accurateType   = type_with_Algorithm<accurateAlgorithm<A>::algorithm>;
    using inaccurateType = type_with_Algorithm<inaccurateAlgorithm<A>::algorithm>;
    using narrowerType   = typename std::conditional_t< @{L}@>=4, tX_real::tx_real<T,A>, dX_real::dx_real<T,A> >;
    using widerType      = typename std::conditional_t< @{L}@==2, tX_real::tx_real<T,A>, qX_real::qx_real<T,A> >;


    //
    // A special member function utilized in constructors
    //
    //
    INLINE T constexpr quick_Normalized () const NOEXCEPT {
      return mX_real::quick_Normalized( *this );
    }
    INLINE @{M}@X_REAL<> constexpr element_rotate () const NOEXCEPT {
      T y[L]; for(auto i=0; i<L; i++) { y[i] = x[i]; }
      for(auto i=0; i<L-1; i++) {
        if ( ! fp<T>::is_zero( y[0] ) ) { return @{M}@X_REAL<>( y ); }
        T t = y[0]; for(auto j=0; j<L-1; j++) { y[j] = y[j+1]; } y[L-1] = t;
      }
      return @{M}@X_REAL<>( y );
    }


    //
    // Simple constructors
    //
    //
    INLINE constexpr @{m}@x_real() NOEXCEPT {
      for(auto i=0; i<L; i++) { x[i] = fp<T>::zero(); }
    }
    INLINE constexpr @{m}@x_real( T const& x0@@{, T const& x@{i}@}@@ ) NOEXCEPT {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto t = x0@@{ + x@{i}@}@@;
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        for(auto i=0; i<L; i++) { x[i] = t; }
      }
#else
      if ( false ) { }
#endif
      else {
        x[0] = x0;@@{ x[@{i}@] = x@{i}@;}@@
      }
    }
    INLINE constexpr @{m}@x_real( T const &h ) NOEXCEPT {
      { x[0] = h; for(auto i=1; i<L; i++) { x[i] = fp<T>::zero(); } }
    }
    template < typename Ts, T_scalar(Ts), T_neq_Ts(T,Ts) >
    INLINE @{m}@x_real( Ts const &h ) NOEXCEPT {
      { x[0] = T(h); for(auto i=1; i<L; i++) { x[i] = fp<T>::zero(); } }
    }
    INLINE constexpr @{m}@x_real( T const *d ) NOEXCEPT {
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto t = d[0]; for(auto i=1; i<L; i++) { t += d[1]; }
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        for(auto i=0; i<L; i++) { x[i] = t; }
      }
#else
      if ( false ) { }
#endif
      else {
        for(auto i=0; i<L; i++) { x[i] = d[i]; }
      }
    }


    //
    // Copy constructor with (or without) any Algorithm switch
    //
    //
    template < template < typename __T__, Algorithm __A__ > class _TX_, Algorithm _A_, T_mX(_TX_<T,_A_>) >
    INLINE constexpr @{m}@x_real( _TX_<T,_A_> const& h ) NOEXCEPT {
      using TX = _TX_<T,_A_>;
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        for(auto i=0; i<L; i++) { x[i] = t; }
      }
#else
      if ( false ) { }
#endif
      else {
        // rewritten in the copya and normalization process
        auto constexpr LL = TX::L;
        auto constexpr need_normalize =
          ( A != Algorithm::Quasi && _A_ == Algorithm::Quasi );
        if ( L < LL ) {
          if ( _A_ == Algorithm::Quasi ) {
            auto s = h;
            mX_real::Normalize<NormalizeOption::Accurate>( s );
            mX_real::copy_with_rounding( x, s.x, L, LL );
          } else {
            mX_real::copy_with_rounding( x, h.x, L, LL );
          }
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Accurate>( *this ); }
        } else {
          mX_real::copy_with_rounding( x, h.x, L, LL );
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Regular>( *this ); }
        }
      }
    }


    //
    // Copy-assignment operator
    //
    //
    INLINE @{M}@X_REAL<> constexpr &operator=( T const& h )_LV_ NOEXCEPT {
      x[0] = h; for(auto i=1; i<L; i++) { x[i] = fp<T>::zero(); }
      return *this;
    }
    template < typename Ts, T_scalar(Ts), T_neq_Ts(T,Ts) >
    INLINE @{M}@X_REAL<> constexpr &operator=( Ts const& h )_LV_ NOEXCEPT {
      x[0] = T(h); for(auto i=1; i<L; i++) { x[i] = fp<T>::zero(); }
      return *this;
    }
    template < template < typename __T__, Algorithm __A__ > class _TX_, Algorithm _A_, T_mX(_TX_<T,_A_>) >
    INLINE @{M}@X_REAL<> constexpr &operator=( _TX_<T,_A_> const& h )_LV_ NOEXCEPT {
      if ( std::is_same< @{M}@X_REAL<A>, _TX_<T,_A_> >::value &&
        this == (@{M}@X_REAL<>*)(&h) ) { return *this; }
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = h.quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        for(auto i=0; i<L; i++) { x[i] = t; }
      }
#else
      if ( false ) { }
#endif
      else {
        // rewritten in the copya and normalization process
        auto constexpr LL = _TX_<T,_A_>::L;
        auto constexpr need_normalize = 
          ( A != Algorithm::Quasi && _A_ == Algorithm::Quasi );
        if ( L < LL ) {
          if ( _A_ == Algorithm::Quasi ) {
            auto s = h;
            mX_real::Normalize<NormalizeOption::Accurate>( s );
            mX_real::copy_with_rounding( x, s.x, L, LL );
          } else {
            mX_real::copy_with_rounding( x, h.x, L, LL );
          }
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Regular>( *this ); }
        } else {
          mX_real::copy_with_rounding( x, h.x, L, LL );
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Accurate>( *this ); }
        }
      }
      return *this;
    }


    //
    // Casting to other datatypes
    //
    //
    explicit
    INLINE constexpr operator T() const NOEXCEPT {
      if ( A == Algorithm::Quasi ) {
        return this->quick_Normalized();
      } else {
        return x[0];
      }
    }
    template < typename Ts, T_fp(Ts), T_neq_Ts(T,Ts) >
    explicit
    INLINE constexpr operator Ts() const NOEXCEPT {
      if ( A == Algorithm::Quasi ) {
        return Ts(this->quick_Normalized());
      } else {
        return Ts(x[0]);
      }
    }
    template < template < typename __T__, Algorithm __A__ > class _TX_, Algorithm _A_, T_mX(_TX_<T,_A_>) >
    explicit
    INLINE constexpr operator _TX_<T,_A_>() const NOEXCEPT {
      using TX = _TX_<T,_A_>;
      TX c;
      auto constexpr LL = TX::L;
#if MX_REAL_USE_INF_NAN_EXCEPTION
      auto const t = this->quick_Normalized();
      if ( fp<T>::isinf( t ) || fp<T>::isnan( t ) ) {
        for(auto i=0; i<LL; i++) { c.x[i] = t; }
      }
#else
      if ( false ) { }
#endif
      else {
       // rewritten in the copya and normalization process
        auto constexpr need_normalize = 
          ( _A_ != Algorithm::Quasi && A == Algorithm::Quasi );
        if ( LL < L ) {
          if ( A == Algorithm::Quasi ) {
            auto s = *this;
            mX_real::Normalize<NormalizeOption::Accurate>( s );
            mX_real::copy_with_rounding( c.x, s.x, LL, L );
          } else {
            mX_real::copy_with_rounding( c.x, x, LL, L );
          }
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Regular>( c ); }
        } else {
          mX_real::copy_with_rounding( c.x, x, LL, L );
          if ( need_normalize ) { mX_real::Normalize<NormalizeOption::Accurate>( c ); }
        }
      }
      return c;
    }


    //
    // unneccessary operators are invalidaded
    //
    //
@@@{ op ! ~ ++ --
    auto operator@{op}@ () = delete;
}@@@
@@@{ op && || &= ^= <<= >>= , []
    template < typename _T_ > auto operator@{op}@  ( _T_ a ) = delete;
}@@@
    auto operator() (...) = delete;


    //
    // static constexpr member functions or constatns
    // contents are always in Accurate format
    // but they follow in the Algorithm argument 'A'
    //
    // Some constants such as NAN, INF are compatible to the format
    // defined in the QD library by Bailey and Hida
    //
    // For example,
    //    NAN = { NAN, NAN, ... } could be aligned with the same sign
    //                            case of mixtured sign, it presents NAN...
    //    INF = { INF, INF, ... } must align with the same sign
    //                            case of mixtured sign, it turns to -NAN
    //                            after the Normalization.
    //
@@@{ func zero one two nhalf
    static INLINE @{M}@X_REAL<> constexpr @{func}@ () NOEXCEPT { return @{M}@X_REAL<>{ fp<T>::@{func}@() }; }
}@@@
@@@{ func nan inf
    static INLINE @{M}@X_REAL<> constexpr @{func}@ () NOEXCEPT { T c = fp<T>::@{func}@(); return @{M}@X_REAL<>{ c@@{, c}@@ }; }
}@@@
    //
    // epsilon() : machine epsilon, specifically,
    //             it is defined by the ulp of a contiguous full-bit
    //             representation
    //
    //             1.11B+0 + 1.11B-{E+1} + 1.11B-{2(E+1)}
    //               EPS = 0.01B-{2(E+1)} = 1.00B-{2(E+1)+E}
    //
    static INLINE @{M}@X_REAL<> constexpr epsilon () NOEXCEPT {
      T c = fp<T>::connect_fp(); c = (c @@{* c}@@) * 2;
      return @{M}@X_REAL<>{ c };
    }

    //
    // denormal_min() : minimum of the denormal floating point
    //                  representation with sign aligment
    //                  it is always the same as denormal_min of the
    //                  single word
    //
    static INLINE @{M}@X_REAL<> constexpr denorm_min  () NOEXCEPT {
      T c = fp<T>::denorm_min();
      return @{M}@X_REAL<>{ c };
    }

    //
    // min() : minimum of the normalized floating point representation
    //         if its last component is regarded as min<T>() with a full-bit
    //         data concatination and normalization 
    //
    //         for example,
    //           1.11B+{K} + 1.11B-{K+(E+1)} ... + std::min<T>()
    //           1.00B-{K} * (EPS/2)^{L-1} = min<T>()
    //           min() = 1.00B-{K} = min<T>()*(EPS/2)^{L-1}
    //                 = min<T>() / (EPS/2)^{L-1}
    //         case of dX
    //           X = min() / EPS * 2 = min() * epslioni() * 2
    //
    static INLINE @{M}@X_REAL<> constexpr min  () NOEXCEPT {
      T c = fp<T>::min();
      for(auto i=1; i<L; i++) { c = c * ( fp<T>::disconnect_fp() ); }
      return @{M}@X_REAL<>{ c };
    }

    //
    // safe_min() : minimum of the normalized floating point representation
    //         if its squared number is the same as min()
    //
    static INLINE @{M}@X_REAL<> constexpr safe_min  () NOEXCEPT {
      T c = fp<T>::min();
      for(auto i=1; i<L; i++) { c = c * ( fp<T>::disconnect_fp() ); }
      c = std::sqrt( c );
      return @{M}@X_REAL<>{ c };
    }

    //
    // critical_min() : minimum of the denormalized floating point
    //         representation if its squared number is the same as denorm_min()
    //
    static INLINE @{M}@X_REAL<> constexpr critical_min  () NOEXCEPT {
      T c = fp<T>::denorm_min();
      for(auto i=1; i<L; i++) { c = c * ( fp<T>::disconnect_fp() ); }
      c = std::sqrt( c );
      return @{M}@X_REAL<>{ c };
    }

    //
    // max() : maximum of the normalized floating point representation
    //         it is usually defined by the full bit pattern with the same
    //         exponent component of the max<T>() 
    //
    static INLINE @{M}@X_REAL<> constexpr max  () NOEXCEPT {
      T c[L];
      c[0] = fp<T>::max();
      for(auto i=1; i<L; i++) { c[i] = c[i-1] * ( fp<T>::connect_fp() ); }
      return @{M}@X_REAL<>{ c };
    }


@@include "@{m}@x_members.hpp"

    //  Friend
    template < typename _T_, Algorithm _A_ >
    friend std::ostream& operator<< ( std::ostream& stream, @{m}@X_real::@{m}@x_real<_T_,_A_> const& a );

  };


  // 
  // get a new type @{m}@X_real<T,A> from TX(={m}X_real<T,A>)
  //
  //
  template < typename TX, T_mX(TX) >
  struct mX_real_impl {
    static Algorithm constexpr A = TX::base_A;
    using T    = typename TX::base_T;
    using type = typename @{m}@X_real::@{m}@x_real<T,A>;
  };
  template < typename TX >
  using mX_real = typename mX_real_impl<TX>::type;
  //
  //
  //
  template < typename TX, Algorithm A, T_mX(TX) >
  struct type_with_Algorithm_impl {
    using type = typename @{m}@X_real::@{m}@x_real<typename TX::base_T,A>;
  };
  template < typename TX, Algorithm A >
  using type_with_Algorithm = typename type_with_Algorithm_impl<TX,A>::type;
  //
  template < typename TX >
  using type_Accurate = type_with_Algorithm_impl<TX, Algorithm::Accurate>;
  template < typename TX >
  using type_Sloppy   = type_with_Algorithm_impl<TX, Algorithm::Sloppy>;
  template < typename TX >
  using type_Quasi    = type_with_Algorithm_impl<TX, Algorithm::Quasi>;


  //
  // Alias names
  //
  //
  template < typename T >
  using @{m}@X_real_accurate = @{m}@X_real::@{m}@x_real<T,Algorithm::Accurate>;
  template < typename T >
  using @{m}@X_real_sloppy   = @{m}@X_real::@{m}@x_real<T,Algorithm::Sloppy>;
  template < typename T >
  using @{m}@X_real_quasi    = @{m}@X_real::@{m}@x_real<T,Algorithm::Quasi>;


@@include "@{m}@x_bits.hpp"
@@include "@{m}@x_comp.hpp"
@@include "@{m}@x_uni.hpp"
@@include "@{m}@x_add_sub_mul_div.hpp"
@@include "@{m}@x_func.hpp"


  //
  //
  //
  template < typename T, Algorithm Aa >
  std::ostream& operator<< ( std::ostream& stream, @{m}@X_real::@{m}@x_real<T,Aa> const& a ) {
    auto constexpr LL = @{m}@X_real::@{m}@x_real<T,Aa>::L;
#if USE_MPREAL
    mpfr::mpreal t = mpfr::mpreal( a.x[0] );
    for(auto i=1; i<LL; i++) { t += mpfr::mpreal( a.x[i] ); }
    stream << t;
#else
    for(auto i=0; i<LL; i++) { stream << a.x[i] << ":"; }
#endif
    return stream;
  }

}
}


#endif

